@using RestaurantManagement.Core.Interfaces
@using RestaurantManagement.Shared.DTOs.Plates
@using RestaurantManagement.Shared.DTOs.Reservations
@using RestaurantManagement.Shared.Enums

@inject IReservationService ReservationService
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success">
            <MudText Typo="Typo.h6" Class="mb-4">@Plate.Name</MudText>
            <MudText Typo="Typo.body2" Class="mb-4">@Plate.Description</MudText>
            <MudText Typo="Typo.h6" Class="mb-4">Price: $@Plate.Price.ToString("F2")</MudText>

            <MudDatePicker @bind-Date="_reservationDate" 
                          Label="Reservation Date" 
                          Required="true"
                          RequiredError="Please select a date"
                          Class="mb-4" />

            <MudTextField @bind-Value="_specialRequests"
                         Label="Special Requests"
                         Lines="3"
                         Class="mb-4" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" 
                  OnClick="Submit" 
                  Disabled="@(!success)">
            Confirm Reservation
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public PlateResponse Plate { get; set; } = default!;
    [Parameter] public string? UserId { get; set; }

    private MudForm form = default!;
    private bool success;
    private DateTime? _reservationDate;
    private string _specialRequests = string.Empty;

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            try
            {
                var request = new ReservationRequest
                {
                    UserId = UserId ?? throw new InvalidOperationException("User ID is required"),
                    PlateId = Plate.Id,
                    ReservationDate = _reservationDate!.Value,
                    SpecialRequests = _specialRequests,
                    Status = ReservationStatus.Pending
                };

                await ReservationService.CreateReservationAsync(request);
                MudDialog.Close(DialogResult.Ok(true));
            }
            catch (Exception ex)
            {
                await DialogService.ShowMessageBox(
                    "Error",
                    $"Failed to create reservation: {ex.Message}",
                    yesText: "OK");
            }
        }
    }
} 